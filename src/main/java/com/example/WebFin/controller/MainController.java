package com.example.WebFin.controller;

import com.example.WebFin.domain.CompanyInfo;
import com.example.WebFin.repos.CompanyInfoRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.UUID;

@Controller // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CompanyInfoRepo companyInfoRepo;

    @Value("${upload.path}") //хотим получить переменную (шаблон спринга)
    private String uploadPath; //ищем проперти uploadPath

    @GetMapping("/")
    public String greeting(Map<String,Object> model) {
        return "greeting";
    }

    @GetMapping("/main")
    public  String main(@RequestParam(required = false, defaultValue = "") String filter, Model model){
        Iterable<CompanyInfo> companyInfos = companyInfoRepo.findAll();
        if (!filter.isEmpty() && filter != null) {
            companyInfos = companyInfoRepo.findByTickerIgnoreCase(filter);
        } else {
            companyInfos = companyInfoRepo.findAll();
        }
        model.addAttribute("companyInfos", companyInfos);
        model.addAttribute("filter", filter);
        return "main";
    }

    @PostMapping("/main") //(path="/add") // Map ONLY POST Requests
    public String add(@RequestParam String ticker, @RequestParam String value,
                      Map<String,Object> model, @RequestParam("file") MultipartFile file) throws IOException {
        //создаем и сохраняем сообщение
        CompanyInfo companyInfo = new CompanyInfo(ticker, value);

        if (file != null && !file.getOriginalFilename().isEmpty()) {
            File uploadDir = new File(uploadPath);
            if (!uploadDir.exists()){ //страхуемся от несуществ. дир.
                uploadDir.mkdir();
            }
            //страхуемся от коллизий и создаем уникальное имя файла
            String uuidFile = UUID.randomUUID().toString();
            String resutFilename = uuidFile + "." + file.getOriginalFilename();

            //загружаем файл
            file.transferTo(new File(uploadPath + "/" + resutFilename));

            companyInfo.setFilename(resutFilename);
        }

        companyInfoRepo.save(companyInfo);

        //возвращаем список сообщений и БД
        Iterable<CompanyInfo> companyInfos = companyInfoRepo.findAll(); //взяли из репозитория
        model.put("companyInfos", companyInfos); //положили в модель

        return "main"; //возвращаем пользователю
    }



    /*@PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }*/

}
